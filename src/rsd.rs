// Jackson Coxson
// Stub code for getting service ports
// Literally just hard-coded HTTP2 frames to get the data we want
// Why does Apple use so many different proprietary protocols?
// Like literally if you're goinna use HTTP2, at least use it right
// Apple's like 'we push forward the industry' yada yada
// But also Apple: 'we designed a custom protocol that we might only use for one thing and then
// never again. Oh yeah, it's a binary format so good luck using it without our blessing'

const MAGIC_PACKET: [u8; 24] = [
    0x50, 0x52, 0x49, 0x20, 0x2a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x0d, 0x0a,
    0x0d, 0x0a, 0x53, 0x4d, 0x0d, 0x0a, 0x0d, 0x0a,
];
const SETTINGS_0: [u8; 21] = [
    0x00, 0x00, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00,
];
const WINDOW_UPDATE_0: [u8; 13] = [
    0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x01,
];
const HEADERS_1: [u8; 9] = [0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x01];
const DATA_1: [u8; 53] = [
    0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x92, 0x0b, 0xb0, 0x29, 0x01, 0x00, 0x00,
    0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x42, 0x37, 0x13, 0x42, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
];
const DATA_1_2: [u8; 33] = [
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x92, 0x0b, 0xb0, 0x29, 0x01, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00,
];
const HEADERS_3: [u8; 9] = [0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x03];
const DATA_3: [u8; 33] = [
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x92, 0x0b, 0xb0, 0x29, 0x01, 0x00, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00,
];
const SETTINGS_0_1: [u8; 9] = [0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00];

#[cfg(test)]
mod tests {
    use std::io::{Read, Write};

    use super::*;

    #[test]
    fn test_pls() {
        let device_ip = "fd4b:b52e:6307::1";
        let device_port = 52331;

        // Connect to the device and send the garbage
        let mut stream = std::net::TcpStream::connect((device_ip, device_port)).unwrap();
        stream.write_all(&MAGIC_PACKET).unwrap();
        stream.write_all(&SETTINGS_0).unwrap();
        stream.write_all(&WINDOW_UPDATE_0).unwrap();
        stream.write_all(&HEADERS_1).unwrap();
        stream.write_all(&DATA_1).unwrap();
        stream.write_all(&DATA_1_2).unwrap();
        stream.write_all(&HEADERS_3).unwrap();
        stream.write_all(&DATA_3).unwrap();
        stream.flush().unwrap();

        // Read the response
        let mut buf = [0; 47];
        stream.read_exact(&mut buf).unwrap();
        println!("{:?}", String::from_utf8_lossy(&buf));

        // Don't care, send the last packet
        stream.write_all(&SETTINGS_0_1).unwrap();
        stream.flush().unwrap();

        // Read the real response
        stream
            .set_read_timeout(Some(std::time::Duration::from_secs(2)))
            .unwrap();

        let mut buf = [0; 16000];
        stream.read_exact(&mut buf).unwrap();
        println!("{:?}", String::from_utf8_lossy(&buf));
    }
}
